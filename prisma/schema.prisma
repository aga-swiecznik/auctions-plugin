generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id       String    @id @default(cuid())
  name     String
  email    String    @unique
  password String
  accounts Account[]
  auctions Auction[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Auction {
  id           String   @id @default(cuid())
  name         String
  orderNumber  Int
  link         String
  groupId      String
  fbId         String?
  adminId      String
  authorId     String
  winnerId     String?
  endsAt       DateTime
  type         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  winnerAmount Int?
  notes        String?
  paid         Boolean  @default(false)
  collected    Boolean  @default(false)
  noOffers     Boolean  @default(false)
  noOffersYet  Boolean  @default(false)
  archived     Boolean  @default(false)
  admin        User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  author       FbUser   @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  winner       FbUser?  @relation("winner", fields: [winnerId], references: [id], onDelete: Cascade)
}

model FbUser {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  auctions  Auction[] @relation("author")
  wins      Auction[] @relation("winner")
}

model Stats {
  id             String   @id @default(cuid())
  payments_count Int
  amount         Int
  percentage     String
  amount_left    Int
  target         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
